using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.VisualBasic.Devices;

namespace saturn
{
    public partial class MainForm : Form
    {
        #region external
        [DllImport("Gdi32.dll", EntryPoint = "CreateRoundRectRgn")]
        private static extern IntPtr CreateRoundRectRgn
        (
            int nLeftRect,
            int nTopRect,
            int nRightRect,
            int nBottomRect,
            int nWidthEllipse,
            int nHeightEllipse
        );
        #endregion

        Process ngrokProcess = new Process();
        Process javaProcess = new Process();

        public string server = "";

        string serverPath = "";

        SettingsFile sf;

        public MainForm()
        {
            InitializeComponent();
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            Region = Region.FromHrgn(CreateRoundRectRgn(0, 0, Width, Height, 15, 15));
            serverPath = Path.Combine(Program.path, "servers", server);
            label1.Text = label1.Text.Replace("%server", server).Replace("%build", Program.build.ToString());

            sf = new SettingsFile(File.ReadAllText(Path.Combine(serverPath, "saturn-config.txt")));

            foreach (string java in Program.javas)
            {
                string path = java.Remove(0, java.IndexOf("(") + 1);
                path = path.Remove(path.Length - 1, 1);
                comboBox1.Items.Add(path);
            }

            foreach (string jar in Directory.GetFiles(Path.Combine(Program.path, "server-jars")))
            {
                comboBox2.Items.Add(Path.GetFileName(jar));
            }

            comboBox1.Text = sf["java"];
            comboBox2.Text = sf["core"];
            textBox2.Text = sf["startArgs"];
            textBox3.Text = sf["ngrokToken"];
            textBox4.Text = sf["ngrokArgs"];
            checkBox1.Checked = sf["ngrokEnabled"] == "true";
            trackBar1.Maximum = (int)(new ComputerInfo().TotalPhysicalMemory / 1024 / 1024);

            if(trackBar1.Maximum < 1024)
            {
                trackBar1.Minimum = 0;
            }

            trackBar1.Value = int.Parse(sf["mem"]);
            trackBar1_Scroll(this, new EventArgs());

            try
            {
                List<CheckBox> checkBoxes = new List<CheckBox>();

                foreach (string line in File.ReadAllText(Path.Combine(serverPath, "server.properties")).Replace("\r", "").Split('\n'))
                {
                    if (line.StartsWith("#") || string.IsNullOrWhiteSpace(line))
                    {
                        continue;
                    }

                    string propName = line.Split('=')[0];
                    string propVal = line.Remove(0, propName.Length + 1);

                    if(propVal == "false" || propVal == "true")
                    {
                        CheckBox chk = new CheckBox();
                        chk.Checked = propVal == "true";
                        chk.Text = propName;
                        chk.ForeColor = Color.White;
                        chk.Width = 100;
                        checkBoxes.Add(chk);
                    }
                    else
                    {
                        TextBox tb = new TextBox();
                        tb.Tag = propName;
                        tb.Text = propVal;
                        tb.Parent = propsPanel;
                        tb.MouseEnter += Tb_MouseEnter;
                    }
                }

                foreach(CheckBox chk in checkBoxes)
                {
                    chk.Parent = propsPanel;
                }
            }
            catch { }

            propsPanel.Dock = DockStyle.Fill;
            consolePanel.Dock = DockStyle.Fill;
            optionsPanel.Dock = DockStyle.Fill;
            consolePanel.Visible = false;
        }

        private void Tb_MouseEnter(object sender, EventArgs e)
        {
            label2.Text = ((Control)sender).Tag.ToString();
        }

        private void closeButton_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                javaProcess.Kill();
            }
            catch { }

            try
            {
                ngrokProcess.Kill();
            }
            catch { }

            SaveProps();
        }

        void SaveProps()
        {
            string props = "# Auto-generated by saturn";
            foreach(Control c in propsPanel.Controls)
            {
                if(c is TextBox)
                {
                    props += "\n" + c.Tag.ToString() + "=" + c.Text;
                }
                else if(c is CheckBox)
                {
                    props += "\n" + c.Text.ToString() + "=" + ((CheckBox)c).Checked.ToString().ToLower();
                }
            }

            label2.Text = "server.props saved!";

            File.WriteAllText(Path.Combine(serverPath, "server.properties"), props);

            File.WriteAllText(Path.Combine(serverPath, "saturn-config.txt"), sf.ToString());
        }

        private void button1_Click(object sender, EventArgs e)
        {
            propsPanel.Visible = true;
            consolePanel.Visible = false;
            optionsPanel.Visible = false;

        }

        bool mouseDown;
        Point mouseOffsetForm;

        private void panel2_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                Point senderLoc = ((Control)sender).Location;
                mouseDown = true;
                mouseOffsetForm = new Point(e.Location.X + senderLoc.X, e.Location.Y + senderLoc.Y);
            }
        }

        private void panel2_MouseUp(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                mouseDown = false;
            }
        }

        private void panel2_MouseMove(object sender, MouseEventArgs e)
        {
            if (mouseDown)
            {
                Point mPos = Control.MousePosition;
                Location = new Point(mPos.X - mouseOffsetForm.X, mPos.Y - mouseOffsetForm.Y);
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            propsPanel.Visible = false;
            consolePanel.Visible = true;
            optionsPanel.Visible = false;
        }

        private void button3_Click(object sender, EventArgs e)
        {
            SaveProps();

            string port = "25565";

            foreach(Control c in propsPanel.Controls)
            {
                if (c is TextBox)
                {
                    TextBox tb = (TextBox)c;
                    if (tb.Tag.ToString() == "server-port" || tb.Tag.ToString() == "port")
                    {
                        port = tb.Text;
                    }
                }
            }

            javaProcess.StartInfo.FileName = sf["java"];
            javaProcess.StartInfo.Arguments = sf["startArgs"].Replace("%mem", sf["mem"]).Replace("%core", Path.Combine(Program.path, "server-jars", sf["core"]));
            javaProcess.StartInfo.WorkingDirectory = serverPath;
            javaProcess.StartInfo.CreateNoWindow = true;
            javaProcess.StartInfo.UseShellExecute = false;
            javaProcess.OutputDataReceived += JavaProcess_OutputDataReceived;
            javaProcess.ErrorDataReceived += JavaProcess_OutputDataReceived;
            javaProcess.StartInfo.RedirectStandardOutput = true;
            javaProcess.StartInfo.RedirectStandardError = true;
            javaProcess.StartInfo.RedirectStandardInput = true;
            javaProcess.Start();
            javaProcess.BeginOutputReadLine();
            javaProcess.BeginErrorReadLine();

            button3.Enabled = false;

            Task.Factory.StartNew(() =>
            {
                javaProcess.WaitForExit();
                button3.Invoke(new MethodInvoker(() =>
                {
                    button3.Enabled = true;
                }));
            });

            if (sf["ngrokEnabled"] == "true")
            {
                try
                {
                    ngrokProcess.Kill();
                }
                catch { }

                ngrokProcess.StartInfo.FileName = Program.ngrokPath;
                ngrokProcess.StartInfo.Arguments = sf["ngrokArgs"].Replace("%token", sf["ngrokToken"]).Replace("%port", port);
                ngrokProcess.StartInfo.CreateNoWindow = true;
                ngrokProcess.StartInfo.UseShellExecute = false;
                ngrokProcess.OutputDataReceived += NgrokProcess_OutputDataReceived;
                ngrokProcess.StartInfo.RedirectStandardOutput = true;
                ngrokProcess.Start();
                ngrokProcess.BeginOutputReadLine();
            }
        }

        private void JavaProcess_OutputDataReceived(object sender, DataReceivedEventArgs e)
        {
            richTextBox1.Invoke(new MethodInvoker(() =>
            {
                richTextBox1.AppendText(e.Data + "\n");
            }));
        }

        private void NgrokProcess_OutputDataReceived(object sender, DataReceivedEventArgs e)
        {
            richTextBox1.Invoke(new MethodInvoker(() =>
            {
                richTextBox1.AppendText(e.Data + "\n");
                if (e.Data.Contains("url=tcp://"))
                {
                    label2.Text = e.Data.Remove(0, e.Data.IndexOf("url=tcp://") + "url=tcp://".Length);
                }
            }));
        }

        private void textBox1_KeyDown(object sender, KeyEventArgs e)
        {
            if(e.KeyCode == Keys.Enter)
            {
                richTextBox1.AppendText("> " + textBox1.Text + "\n");
                try
                {
                    javaProcess.StandardInput.WriteLine(textBox1.Text);
                }
                catch (Exception ex)
                {
                    richTextBox1.AppendText("Exception: " + ex.Message + "\n");
                }
                textBox1.Text = "";
            }
        }

        private void hideButton_Click(object sender, EventArgs e)
        {
            WindowState = FormWindowState.Minimized;
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void trackBar1_Scroll(object sender, EventArgs e)
        {
            label6.Text = trackBar1.Value.ToString() + " Megabytes";

            sf["mem"] = trackBar1.Value.ToString();
        }

        private void comboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            sf["core"] = comboBox2.Text;
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            sf["java"] = comboBox1.Text;
        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {
            sf["startArgs"] = textBox2.Text;
        }

        private void textBox3_TextChanged(object sender, EventArgs e)
        {
            sf["ngrokToken"] = textBox3.Text;
        }

        private void textBox4_TextChanged(object sender, EventArgs e)
        {
            sf["ngrokArgs"] = textBox4.Text;
        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            sf["ngrokEnabled"] = checkBox1.Checked.ToString().ToLower();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            propsPanel.Visible = false;
            consolePanel.Visible = false;
            optionsPanel.Visible = true;
        }

        private void label2_Click(object sender, EventArgs e)
        {
            Clipboard.SetText(label2.Text);
        }
    }
}
